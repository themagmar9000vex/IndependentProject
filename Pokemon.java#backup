
/**
 * Represents the species of Pokemon, which can be inherited to create specific pokemons. 
 *
 * @author Kush Khanna
 * @version 1.0
 */
public abstract class Pokemon   
{

    public enum Types{NORMAL, FIRE, WATER, GRASS, FIGHTING, BUG, POISON, GROUND, ROCK, STEEL, GHOST, ICE, DRAGON, DARK, PSYCHIC, FLYING, ELECTRIC, NONE};
    public enum StatusEffect{NEUTRAL, CONFUSED, POISONED, SLEEP, PARALYSIS, FROZEN, BURN};
    
    private String name;    
    private Types[] types;
    private int[] stats; //Attack, Special Attack, Defense, Special Defense, Speed
    private int[] hp; //Current HP & Starting HP
    private StatusEffect status;
    private String[] moveList;
    private Types currentMoveType;
    private double modifier;
    
    public Pokemon(String name,Types type1, Types type2, int hp, int att, int speAtt, int def, int speDef, int spe, String[] moves){
        this.name = name;
        types = new Types[] {type1, type2};
        stats = new int[] {att, speAtt, def, speDef, spe};
        this.hp = new int[] {hp,hp};
        status = StatusEffect.NEUTRAL;
        moveList = moves;
        currentMoveType = Types.NONE;
        modifier = 1.0;
    }
    
    public String getName(){return name;}
    public Types[] getTypes(){return types;}
    public int[] getStats(){return stats;}
    public double getHPPercentage(){return (hp[0]*1.0)/(hp[1]*1.0);}
    public StatusEffect getStatus(){return status;}
    public String[] getMoveList(){return moveList;}
    public Types getCurrentMoveType(){return currentMoveType;}
    public double getModifier(){return modifier;}
    
    public double effectivenessChecker(Types moveType, Pokemon opp){
        Types[] opponentTypes = opp.getTypes();
        double[] effectiveness = {1.0,1.0};
        for(int i = 0; i < opponentTypes.length; i++)   
            switch(moveType){
                    case NORMAL:
                    if(opponentTypes[i] == Types.ROCK || opponentTypes[i] == Types.STEEL){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.GHOST){effectiveness[i] = 0;}
                    break;
                    case FIRE:
                    if(opponentTypes[i] == Types.FIRE || opponentTypes[i] == Types.WATER || opponentTypes[i] == Types.ROCK || opponentTypes[i] == Types.DRAGON){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.GRASS || opponentTypes[i] == Types.ICE || opponentTypes[i] == Types.BUG || opponentTypes[i] == Types.STEEL){effectiveness[i] = 2;}
                    break;
                    case WATER:
                    if(opponentTypes[i] == Types.WATER || opponentTypes[i] == Types.GRASS || opponentTypes[i] == Types.DRAGON){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.FIRE || opponentTypes[i] == Types.GROUND || opponentTypes[i] == Types.ROCK){effectiveness[i] = 2;}                
                    break;
                    case GRASS:
                    if(opponentTypes[i] == Types.FIRE || opponentTypes[i] == Types.GRASS || opponentTypes[i] == Types.POISON || opponentTypes[i] == Types.FLYING || opponentTypes[i] == Types.BUG || opponentTypes[i] == Types.DRAGON || opponentTypes[i] == Types.STEEL){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.WATER || opponentTypes[i] == Types.GROUND || opponentTypes[i] == Types.ROCK){effectiveness[i] = 2;}                    
                    break;
                    case FIGHTING:
                    if(opponentTypes[i] == Types.POISON || opponentTypes[i] == Types.FLYING || opponentTypes[i] == Types.PSYCHIC || opponentTypes[i] == Types.BUG){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.NORMAL || opponentTypes[i] == Types.ICE || opponentTypes[i] == Types.ROCK || opponentTypes[i] == Types.DARK || opponentTypes[i] == Types.STEEL){effectiveness[i] = 2;}                           
                    if(opponentTypes[i] == Types.GHOST){effectiveness[i] = 0;}
                    break;
                    case BUG:
                    if(opponentTypes[i] == Types.FIRE || opponentTypes[i] == Types.FIGHTING || opponentTypes[i] == Types.POISON || opponentTypes[i] == Types.GHOST || opponentTypes[i] == Types.STEEL){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.GRASS || opponentTypes[i] == Types.PSYCHIC || opponentTypes[i] == Types.DARK){effectiveness[i] = 2;}                        
                    break;
                    case POISON:
                    if(opponentTypes[i] == Types.POISON || opponentTypes[i] == Types.GROUND || opponentTypes[i] == Types.ROCK || opponentTypes[i] == Types.GHOST){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.GRASS){effectiveness[i] = 2;}      
                    if(opponentTypes[i] == Types.STEEL){effectiveness[i] = 0;}
                    break;
                    case GROUND: 
                    if(opponentTypes[i] == Types.GRASS || opponentTypes[i] == Types.BUG){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.FIRE || opponentTypes[i] == Types.ELECTRIC || opponentTypes[i] == Types.POISON || opponentTypes[i] == Types.ROCK || opponentTypes[i] == Types.STEEL){effectiveness[i] = 2;}      
                    if(opponentTypes[i] == Types.FLYING){effectiveness[i] = 0;}                    
                    break;
                    case ROCK:
                    if(opponentTypes[i] == Types.FIGHTING || opponentTypes[i] == Types.GROUND || opponentTypes[i] == Types.STEEL){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.FIRE || opponentTypes[i] == Types.ICE || opponentTypes[i] == Types.BUG || opponentTypes[i] == Types.FLYING){effectiveness[i] = 2;}
                    break;
                    case STEEL:
                    if(opponentTypes[i] == Types.FIRE || opponentTypes[i] == Types.WATER || opponentTypes[i] == Types.ELECTRIC || opponentTypes[i] == Types.STEEL){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.ICE || opponentTypes[i] == Types.ROCK){effectiveness[i] = 2;}
                    break;
                    case GHOST:   
                    if(opponentTypes[i] == Types.DARK){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.PSYCHIC || opponentTypes[i] == Types.GHOST){effectiveness[i] = 2;}      
                    if(opponentTypes[i] == Types.NORMAL){effectiveness[i] = 0;}   
                    break;
                    case ICE:
                    if(opponentTypes[i] == Types.FIRE || opponentTypes[i] == Types.WATER || opponentTypes[i] == Types.STEEL || opponentTypes[i] == Types.ICE){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.GRASS || opponentTypes[i] == Types.GROUND || opponentTypes[i] == Types.FLYING || opponentTypes[i] == Types.DRAGON){effectiveness[i] = 2;}                    
                    break;
                    case DRAGON:   
                    if(opponentTypes[i] == Types.STEEL){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.DRAGON){effectiveness[i] = 2;}      
                    break;
                    case DARK:
                    if(opponentTypes[i] == Types.FIGHTING || opponentTypes[i] == Types.DARK){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.PSYCHIC || opponentTypes[i] == Types.GHOST){effectiveness[i] = 2;}                    
                    break;
                    case PSYCHIC:
                    if(opponentTypes[i] == Types.PSYCHIC || opponentTypes[i] == Types.STEEL){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.FIGHTING || opponentTypes[i] == Types.POISON){effectiveness[i] = 2;}      
                    if(opponentTypes[i] == Types.DARK){effectiveness[i] = 0;}                      
                    break;
                    case FLYING:    
                    if(opponentTypes[i] == Types.ELECTRIC || opponentTypes[i] == Types.ROCK || opponentTypes[i] == Types.STEEL ){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.GRASS || opponentTypes[i] == Types.FIGHTING || opponentTypes[i] == Types.BUG){effectiveness[i] = 2;}                        
                    break;
                    case ELECTRIC:
                    if(opponentTypes[i] == Types.ELECTRIC || opponentTypes[i] == Types.GRASS || opponentTypes[i] == Types.DRAGON){effectiveness[i] = 0.5;}
                    if(opponentTypes[i] == Types.WATER || opponentTypes[i] == Types.FLYING){effectiveness[i] = 2;}      
                    if(opponentTypes[i] == Types.GROUND){effectiveness[i] = 0;}                        
                    break;
                }
        return effectiveness[0] * effectiveness[1];
    }
    
    public void raiseAtt(){stats[0] *= 1.1;}
    public void raiseSpeAtt(){stats[1] *= 1.15;}
    public void raiseDef(){stats[2] *= 1.1;}
    public void raiseSpeDef(){stats[3] *= 1.15;}
    public void raiseSpeed(){stats[4] *= 1.25;}
    
    public void setStatus(StatusEffect status){
        this.status = status;
    }    
    
    
    public void setCurrentMoveType(Types moveType){
        this.currentMoveType = moveType;
    }
    
    public void setModifier(double crit, double effectiveness){
        double STAB = 1;
        if(this.currentMoveType == types[0] || this.currentMoveType == types[1]){STAB = 1.5;}
        this.modifier = crit * effectiveness * STAB;
    }    
    
    public void takePhysicalDMG(int dmg, Pokemon opp){
        double oppIsBurned = 1;
        if(opp.getStatus() == StatusEffect.BURN){oppIsBurned = 0.5;}
        double oppMod = opp.getModifier();
        double oppAtt = opp.getStats()[0];
        hp[0] -= (((42 * dmg * ((oppAtt*1.0)/(stats[2]*1.0)))/50)+2) * oppMod * oppIsBurned;
    }
    
    public void takeSpecialDMG(int dmg, Pokemon opp){
        double oppMod = opp.getModifier();
        double oppSpeAtt = opp.getStats()[1];
        hp[0] -= (((42 * dmg * ((oppSpeAtt*1.0)/(stats[3]*1.0)))/50)+2) * oppMod;
    }    
    
    public abstract int[] move1(Pokemon opp);
    public abstract int[] move2(Pokemon opp);
    public abstract int[] move3(Pokemon opp);
    public abstract int[] move4(Pokemon opp);    

}
